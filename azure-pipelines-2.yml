trigger:
- main

variables:
  dockerRegistryServiceConnection: '467aebc6-c2d7-48d1-af79-d79a67c80398' # ACR service connection ID or name
  imageRepository: 'foodcart-node'
  containerRegistry: 'myacr.azurecr.io'
  dockerfilePath: '.github/manifests/Dockerfile'
  tag: '$(Build.BuildId)'

  azureSubscriptionEndpoint: 'default'
  azureResourceGroup: 'Nayana'
  kubernetesCluster: 'managedevopsagent'
  namespace: 'prod'
  manifestsPath: '.github/manifests/deployment.yaml'

pool:
  name: magedpool

stages:
# ========== BUILD STAGE ==========
- stage: Build
  displayName: 'Build and Push Docker Image'
  jobs:
  - job: Build
    displayName: 'Build & Push Image'
    steps:
    - checkout: self

    - script: |
        echo "Listing repository files..."
        ls -R
      displayName: 'List Files in Repo'

    # ✅ Build & Push image using Docker@2 task (works in managed pools)
    - task: Docker@2
      displayName: 'Build and Push Image to ACR'
      inputs:
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(imageRepository)
        command: 'buildAndPush'
        Dockerfile: $(dockerfilePath)
        tags: |
          latest
          $(tag)

    # ✅ Update Kubernetes manifest with new tag
    - script: |
        echo "Updating manifest with image tag..."
        sed -i "s|image: .*|image: $(containerRegistry)/$(imageRepository):$(tag)|" $(manifestsPath)
      displayName: 'Update Kubernetes Manifest with New Image Tag'

    - publish: .github/manifests
      artifact: manifests

# ========== DEPLOY STAGE ==========
- stage: Deploy
  displayName: 'Deploy to AKS'
  dependsOn: Build
  jobs:
  - job: Deploy
    displayName: 'Deploy Application to AKS'
    steps:
    - download: current
      artifact: manifests

    # ✅ Use Azure DevOps Kubernetes task to deploy
    - task: Kubernetes@1
      displayName: 'Deploy to AKS'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
        azureResourceGroup: $(azureResourceGroup)
        kubernetesCluster: $(kubernetesCluster)
        namespace: $(namespace)
        command: 'apply'
        useConfigurationFile: true
        configuration: '$(Pipeline.Workspace)/manifests/deployment.yaml'
