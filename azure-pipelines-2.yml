# Azure DevOps pipeline to build, push, and deploy to AKS
# Trigger when main branch updates
trigger:
- main

resources:
- repo: self

variables:
  # Update these with your actual values
  dockerRegistryServiceConnection: '467aebc6-c2d7-48d1-af79-d79a67c80398'  # ACR service connection in Azure DevOps
  azureSubscriptionEndpoint: 'default'                            # ARM connection to Azure
  azureResourceGroup: 'my-rg'
  kubernetesCluster: 'my-aks-cluster'
  imageRepository: 'foodcart-node'
  containerRegistry: 'myacr.azurecr.io'
  dockerfilePath: 'Dockerfile'
  manifestsPath: '.github/manifests/deployment.yaml'
  tag: '$(Build.BuildId)'

# Use your managed agent pool
pool:
  name: magedpool

stages:
# ----------------------------
# 1️⃣ Build & Push Docker Image
# ----------------------------
- stage: Build
  displayName: 'Build and Push Image to ACR'
  jobs:
  - job: Build
    displayName: 'Build and Push'
    steps:
    - script: |
        echo "Checking Docker installation..."
        docker version
      displayName: 'Verify Docker Availability'

    - task: Docker@2
      displayName: 'Build and Push Image to ACR'
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - task: Bash@3
      displayName: 'Replace image tag in manifest'
      inputs:
        targetType: 'inline'
        script: |
          sed -i "s|\$(Build.BuildId)|$(tag)|g" $(manifestsPath)
          echo "Updated manifest file with tag $(tag)"
    
    - publish: .github/manifests
      artifact: manifests

# ----------------------------
# 2️⃣ Deploy to AKS
# ----------------------------
- stage: Deploy
  displayName: 'Deploy to AKS'
  dependsOn: Build
  jobs:
  - job: Deploy
    displayName: 'Deploy Application'
    steps:
    - download: current
      artifact: manifests

    - task: Kubernetes@1
      displayName: 'Deploy to AKS'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
        azureResourceGroup: $(azureResourceGroup)
        kubernetesCluster: $(kubernetesCluster)
        namespace: 'default'
        command: 'apply'
        useConfigurationFile: True
        configuration: '$(Pipeline.Workspace)/manifests/deployment.yaml'
