# Azure DevOps pipeline: Build, push Docker image and deploy to AKS
trigger:
- main

variables:
  # Docker / ACR
  dockerRegistryServiceConnection: '467aebc6-c2d7-48d1-af79-d79a67c80398'
  imageRepository: 'foodcart-node'
  containerRegistry: 'myacr.azurecr.io'
  dockerfilePath: '.github/manifests/Dockerfile'   # <-- update this to the actual path of your Dockerfile
  tag: '$(Build.BuildId)'

  # AKS
  azureSubscriptionEndpoint: 'default'
  azureResourceGroup: 'Nayana'
  kubernetesCluster: 'managedevopsagent'
  namespace: 'prod'
  manifestsPath: '.github/manifests/deployment.yaml'

# Use your self-hosted managed agent
pool:
  name: magedpool

stages:

# ----------------------------
# 1️⃣ Build & Push Docker Image
# ----------------------------
- stage: Build
  displayName: 'Build and Push Docker Image'
  jobs:
  - job: Build
    displayName: 'Build & Push'
    steps:

    # Debug: list repo files
    - script: |
        echo "Listing repo files..."
        ls -R
      displayName: 'List files in repository'

    # Install Docker if not present
    - script: |
        echo "Installing Docker..."
        sudo apt-get update -y
        sudo apt-get install -y ca-certificates curl gnupg lsb-release
        sudo mkdir -p /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
          https://download.docker.com/linux/ubuntu \
          $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get update -y
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
        sudo systemctl start docker
        sudo systemctl enable docker
        sudo docker --version
      displayName: 'Install Docker on Agent'

    # Verify Docker
    - script: |
        echo "Verifying Docker installation..."
        sudo docker version
      displayName: 'Verify Docker Availability'

    # Build Docker image
    - script: |
        echo "Building Docker image..."
        sudo docker build -t $(containerRegistry)/$(imageRepository):$(tag) -f $(dockerfilePath) .
      displayName: 'Build Docker Image'

    # Login to ACR
    - script: |
        echo "Logging in to ACR..."
        sudo az acr login --name $(containerRegistry)
      displayName: 'Login to Azure Container Registry'

    # Push Docker image to ACR
    - script: |
        echo "Pushing Docker image to ACR..."
        sudo docker push $(containerRegistry)/$(imageRepository):$(tag)
      displayName: 'Push Docker Image to ACR'

    # Update Kubernetes manifest
    - script: |
        echo "Updating manifest with new image tag..."
        sed -i "s|$(containerRegistry)/$(imageRepository):.*|$(containerRegistry)/$(imageRepository):$(tag)|g" $(manifestsPath)
      displayName: 'Update Kubernetes Manifest with Image Tag'

    # Publish manifest as artifact
    - publish: .github/manifests
      artifact: manifests

# ----------------------------
# 2️⃣ Deploy to AKS
# ----------------------------
- stage: Deploy
  displayName: 'Deploy to AKS'
  dependsOn: Build
  jobs:
  - job: Deploy
    displayName: 'Deploy Application to AKS'
    steps:
    # Download the updated manifest
    - download: current
      artifact: manifests

    # Deploy manifest to AKS
    - task: Kubernetes@1
      displayName: 'Deploy to AKS'
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
        azureResourceGroup: $(azureResourceGroup)
        kubernetesCluster: $(kubernetesCluster)
        namespace: $(namespace)
        command: 'apply'
        useConfigurationFile: True
        configuration: '$(Pipeline.Workspace)/manifests/deployment.yaml'
